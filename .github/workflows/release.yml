name: release

on:
  pull_request:
    types: [closed]
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      releaseType:
        description: 'The release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - alpha
          - beta
          - rc
      preReleaseAction:
        description: |
          The pre-release action to take:
            - premajor (e.g., 1.x.x => 2.0.0-alpha.0)
            - prerelease (e.g., 2.0.0-alpha.0 => 2.0.0-alpha.1, 2.0.0-alpha.0 => 2.0.0-beta.0, etc.)
            - none do nothing, no release will be made

          It works just for alpha, beta and rc release types.
        required: false
        default: 'none'
        type: choice
        options:
          - none
          - premajor
          - prerelease
jobs:
  debug:
    if: github.event.pull_request.merged || inputs.releaseType != ''
    runs-on: 'ubuntu-latest'
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: |
          echo "$GITHUB_CONTEXT"
          echo "${{ inputs.releaseType }}"
  release-on-push:
    if: github.event.pull_request.merged || inputs.releaseType != ''
    runs-on: 'ubuntu-latest'
    env:
      ALPHA_RELEASE: contains(github.event.pull_request.labels.*.name, 'release:alpha')
      BETA_RELEASE: contains(github.event.pull_request.labels.*.name, 'release:beta')
      RC_RELEASE: contains(github.event.pull_request.labels.*.name, 'release:rc')
      MAJOR_RELEASE: contains(github.event.pull_request.labels.*.name, 'release:major')
      MINOR_RELEASE: contains(github.event.pull_request.labels.*.name, 'release:minor')
      PATCH_RELEASE: contains(github.event.pull_request.labels.*.name, 'release:patch')
      PRE_RELEASE: contains(github.event.pull_request.labels.*.name, 'release:alpha') || contains(github.event.pull_request.labels.*.name, 'release:beta') || contains(github.event.pull_request.labels.*.name, 'release:rc')
    steps:
      - name: Debug releaseType
        if: inputs.releaseType != ''
        run: |
          echo "RELEASE TYPE: ---${{ inputs.releaseType }}---"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          registry-url: 'https://registry.npmjs.org'

      - name: Setup git user
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Install
        run: npm install

      - name: Prepare
        run: npm run dev:prepare

      - name: Git command for "to" of release
        run: git rev-parse --abbrev-ref HEAD

      - name: Major release
        if: (!env.PRE_RELEASE && env.MAJOR_RELEASE) || inputs.releaseType == 'major'
        run: npm run release:major
        #run: |
        #  echo "RELEASE TYPE: ---${{ inputs.releaseType }}---"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Minor release
        if: (!env.PRE_RELEASE && env.MINOR_RELEASE) || inputs.releaseType == 'minor'
        run: npm run release:minor
        #run: |
        #  echo "RELEASE TYPE: ---${{ inputs.releaseType }}---"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Patch release
        if: (!env.PRE_RELEASE && env.PATCH_RELEASE) || inputs.releaseType == 'patch'
        run: npm run release:patch
        #run: |
        #  echo "RELEASE TYPE: ---${{ inputs.releaseType }}---"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Premajor alpha release
        if: (env.ALPHA_RELEASE && env.MAJOR_RELEASE) || (inputs.releaseType == 'alpha' && inputs.preReleaseAction == 'premajor')
        run: npm run release:alpha
        #run: |
        #  echo "RELEASE TYPE: ---${{ inputs.releaseType }}---"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Prerelease alpha
        if: (env.ALPHA_RELEASE && !env.MAJOR_RELEASE) || (inputs.releaseType == 'alpha' && inputs.preReleaseAction == 'prerelease')
        run: npm run prerelease:alpha
        #run: |
        #  echo "RELEASE TYPE: ---${{ inputs.releaseType }}---"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Premajor beta release
        if: (env.BETA_RELEASE && env.MAJOR_RELEASE) || (inputs.releaseType == 'beta' && inputs.preReleaseAction == 'premajor')
        run: npm run release:beta
        #run: |
        #  echo "RELEASE TYPE: ---${{ inputs.releaseType }}---"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Prerelease beta
        if: (env.BETA_RELEASE && !env.MAJOR_RELEASE) || (inputs.releaseType == 'beta' && inputs.preReleaseAction == 'prerelease')
        run: npm run prerelease:beta
        #run: |
        #  echo "RELEASE TYPE: ---${{ inputs.releaseType }}---"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Premajor rc release
        if: (env.RC_RELEASE && env.MAJOR_RELEASE) || (inputs.releaseType == 'rc' && inputs.preReleaseAction == 'premajor')
        run: npm run release:rc
        #run: |
        #  echo "RELEASE TYPE: ---${{ inputs.releaseType }}---"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Prerelease rc
        if: (env.RC_RELEASE && !env.MAJOR_RELEASE) || (inputs.releaseType == 'rc' && inputs.preReleaseAction == 'prerelease')
        run: npm run prerelease:rc
        #run: |
        #  echo "RELEASE TYPE: ---${{ inputs.releaseType }}---"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
